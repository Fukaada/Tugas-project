import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# ========================== Fungsi Utility ==========================
def upload_and_load_data():
    """Upload dan membaca file data Excel dengan format khusus."""
    print("Silakan upload file Excel (contoh: kurs_gbp.xlsx):")
    uploaded = files.upload()
    file_name = list(uploaded.keys())[0]
    try:
        # Membaca file Excel
        df = pd.read_excel(file_name, decimal=',')  # Tambahkan argumen decimal untuk menangani koma
        required_columns = ['Tanggal', 'Kurs Jual']
        if not all(col in df.columns for col in required_columns):
            print(f"Error: File harus memiliki kolom {required_columns}")
            return None
        
        # Konversi tanggal
        df['Tanggal'] = pd.to_datetime(df['Tanggal'], format='%m/%d/%Y')
        
        # Menjadikan tanggal sebagai index
        df.set_index('Tanggal', inplace=True)
        return df
    except Exception as e:
        print(f"Error membaca file: {e}")
        return None

def create_features_and_labels(df):
    """Membuat fitur X_t-2, X_t-1 dan label X_t."""
    df['X_t-2'] = df['Kurs Jual'].shift(2)
    df['X_t-1'] = df['Kurs Jual'].shift(1)
    df['X_t'] = df['Kurs Jual']
    df['Label Naik Turun'] = (df['Kurs Jual'].diff() > 0).astype(int)
    df.dropna(inplace=True)
    return df

def train_models(X_train, y_train, y_train_logreg):
    """Melatih model KNN dan Logistic Regression."""
    knn_model = KNeighborsRegressor(n_neighbors=5)
    knn_model.fit(X_train, y_train)
    
    logreg_model = LogisticRegression(max_iter=1000)
    logreg_model.fit(X_train, y_train_logreg)
    return knn_model, logreg_model

def predict_future(df, knn_model, logreg_model):
    """Melakukan prediksi untuk 9-11 November 2024."""
    try:
        X_pred = df.loc['2024-11-07':'2024-11-08', ['X_t-2', 'X_t-1']]
        pred_9_nov = knn_model.predict([X_pred.iloc[-1].values])
        logreg_9_nov = logreg_model.predict([X_pred.iloc[-1].values])
        
        X_pred.loc['2024-11-09'] = [X_pred.iloc[-1, 1], pred_9_nov[0]]
        pred_10_nov = knn_model.predict([X_pred.loc['2024-11-09'].values])
        
        X_pred.loc['2024-11-10'] = [X_pred.loc['2024-11-09', 1], pred_10_nov[0]]
        pred_11_nov = knn_model.predict([X_pred.loc['2024-11-10'].values])
        
        return pred_9_nov, pred_10_nov, pred_11_nov, logreg_9_nov
    except Exception as e:
        print(f"Error prediksi masa depan: {e}")
        return None, None, None, None

def evaluate_performance(actual_logreg, pred_logreg):
    """Evaluasi kinerja model Logistic Regression."""
    acc = accuracy_score(actual_logreg, pred_logreg)
    prec = precision_score(actual_logreg, pred_logreg)
    rec = recall_score(actual_logreg, pred_logreg)
    f1 = f1_score(actual_logreg, pred_logreg)
    return acc, prec, rec, f1

def visualize_predictions(df, pred_9_nov, pred_10_nov, pred_11_nov):
    """Visualisasi prediksi vs data aktual."""
    plt.figure(figsize=(10, 6))
    plt.plot(df['Kurs Jual'], label='Kurs Aktual')
    plt.scatter(['2024-11-09', '2024-11-10', '2024-11-11'], 
                [pred_9_nov[0], pred_10_nov[0], pred_11_nov[0]], 
                color='red', label='Prediksi', marker='x')
    plt.legend()
    plt.title('Prediksi Kurs Jual GBP 9-11 November 2024')
    plt.show()

# ========================== Menu Utama ==========================
def main_menu():
    print("=== Sistem Prediksi Kurs GBP ===")
    print("1. Upload dan Baca Data")
    print("2. Latih Model")
    print("3. Prediksi Masa Depan")
    print("4. Evaluasi Model")
    print("5. Visualisasi Prediksi")
    print("0. Keluar")
    print("===============================")

def main():
    data = None
    knn_model, logreg_model = None, None
    while True:
        main_menu()
        choice = input("Pilih menu: ")
        if choice == '1':
            data = upload_and_load_data()
            if data is not None:
                data = create_features_and_labels(data)
                print("Data berhasil di-upload dan diproses!")
                print(data.head())
        elif choice == '2' and data is not None:
            train_data = data.loc[:'2021-09-30']
            test_data = data.loc['2021-10-01':]
            X_train = train_data[['X_t-2', 'X_t-1']]
            y_train = train_data['X_t']
            y_train_logreg = train_data['Label Naik Turun']
            knn_model, logreg_model = train_models(X_train, y_train, y_train_logreg)
            print("Model berhasil dilatih!")
        elif choice == '3' and knn_model and logreg_model:
            pred_9, pred_10, pred_11, logreg_pred_9 = predict_future(data, knn_model, logreg_model)
            if pred_9 is not None:
                print(f"Prediksi Kurs Jual (9 November 2024): {pred_9[0]}")
                print(f"Prediksi Kurs Jual (10 November 2024): {pred_10[0]}")
                print(f"Prediksi Kurs Jual (11 November 2024): {pred_11[0]}")
        elif choice == '4' and data is not None:
            actual_logreg = data.loc['2024-11-09':'2024-11-11', 'Label Naik Turun']
            pred_logreg = [logreg_pred_9[0], 0, 0]  # Sesuaikan jika lebih lanjut
            acc, prec, rec, f1 = evaluate_performance(actual_logreg, pred_logreg)
            print(f"Akurasi: {acc*100:.2f}%")
            print(f"Precision: {prec*100:.2f}%")
            print(f"Recall: {rec*100:.2f}%")
            print(f"F1-Score: {f1*100:.2f}%")
        elif choice == '5' and data is not None:
            visualize_predictions(data, pred_9, pred_10, pred_11)
        elif choice == '0':
            print("Keluar dari sistem. Terima kasih!")
            break
        else:
            print("Pilihan tidak valid atau data belum di-upload.")

if __name__ == "__main__":
    main()
